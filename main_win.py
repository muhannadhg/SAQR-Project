import speech_recognition as sr # ูุฐุง ูุญูู ุงูููุงู ุงูู ูุต
from gtts import gTTS # ูุณุชุฎุฏู ุชูููุฉ ูููู ุงูู ุชุญูู ุงููุต ุงูู ููุงู ูุฌุงููู ุทุจุนุง
import os # ูุฐู ุงุดูุงุก ูู ุงููุธุงู ูุซูุง ูุดุบู ุตูุช ูุญูุธ ูููุงุช ุงูู ุงุฎุฑู
import pywhatkit as kit # ูุฐู ุญูุช ุงูููุชููุจ ูุฏุฑู ุตุฑุงุญู ุงูุด ุชุณูู ุจุณ ุงูู ุงุนุฑูู ุงููุง ุชุจุญุซ ูู ุงูููุชููุจ ูุชุทูุน ุงูู ููุทุน
import wikipediaapi # ูุฐู ุญูุช ูููุจูุฏูุง ุงุฐุง ุณุงูุช  ูุซูุง ูู ูู ูุญูุฏ ุจู ุณููุงู ุฑุญ ูุจุญุซ ูู ูููุจูุฏูุง ูุจุนุฏ ูุฐุง ุจูุทุจุน ูู ุงููุงุชุฌ ูุจููุทูู ุงูุญุจูุจ ุงูู ููู
from bs4 import BeautifulSoup # ูุฐู ุณุงููุชูุง ุทูููู ุจุงููุฎุชุตุฑ ุดูุชู ูููุจูุฏูุง ุงุฐุง ุฌุงุก ูุทุจุน ุงูููุงู ูุทุจุนูุง ููุถูู ุนูููุง ุงุดูุงุก ุญูุช ุงู HTML ูุงูุญุจูุจ ุญู ูููู ููุทููุง ุดุฑุทุฉู ูุณูุงุดู ุฒู ูุฐุง ูุฐุง ูุญุฐููุง ูุฐู ูุงูุฏุชู
import requests # ูุฐุง ูุงุทููู ุงูุนูุฑ ุญู ุงู Api ุณุงููุชู ูุฑุจุท ุจูู ุงููููุนู ุญูู ููููู ุฌูุจ ุจููุงุช ููุท ูููู ูุณุชูุจูุงู ุงู ุดุงุก ุงููู ููุฏุฑ ูุนุฏู ูู ุจุณ ูุฌูุจ
import tkinter as tk # ูุฐุง ุญุทูุชู ูุงููู ุจุณ ุนุดุงู ุณูุงุณุฉ ุงูููุงู (ููุงุท)
import threading # ูุฐุง ุดูุชู ุงุฐุง ุฌุงุก ููุทู ุงูุจุฑูุงูุฌ ูุงู ูุนูู ุงูุญูู ุฐุง ุฎููุง ููุทู ูู ุงูุฎูููุฉ ูุงูุญุชุงุฌ ุงูุจุฑูุงูุฌ ูุนูู ูู ูุฑู ููุทู ูููุง
import subprocess # ูุฐุง ุณุงููุชู ุทููู ุจุณ ุจุฎุชุตุงุฑ ุนุดุงู ุฌูุงุฒู ูุงู ูู ุงูู ูุดุบู ุงูููุฏูู
from pydub import AudioSegment
import simpleaudio as sa
from translate import Translator #ูุฐุง ููุชุจุฉ ูุชุฑุฌู ุงูููุงู ุ ูุงุณุชุฎุฏูุชูุง ุนุดุงู ูุชุฑุฌู ุงุณู ุงูููู

# ุฏุงูุฉ ูุชุญููู ููู mp3 ุฅูู wave
def mp3_to_wave(mp3_file, wave_file):
    sound = AudioSegment.from_mp3(mp3_file)
    sound.export(wave_file, format="wav")

# ุฏุงูุฉ ูุชุดุบูู ุงูููู ุงูุตูุชู
def play_audio(wave_file):
    wave_obj = sa.WaveObject.from_wave_file(wave_file)
    play_obj = wave_obj.play()
    play_obj.wait_done()

# ุฏุงูุฉ ูููุทู
def say(text):
    tts = gTTS(text=text, lang='ar')
    tts.save('output.mp3')
    mp3_to_wave('output.mp3', 'output.wav')
    play_audio('output.wav')
    # ูู ุจุญุฐู ุงูููู ุงููุคูุช
    os.remove('output.mp3')
    os.remove('output.wav')

#ูุฐุง ูุงุฎุฐ ููุงู ุงููุณุชุฎุฏู ูุญุทู ูู ูุงูุฌูุฉ ูููุทูู
def print_user_input(text):
    output_text.tag_configure("user_tag", justify='right', foreground='#EAEAEA')
    output_text.insert("end", f"{text}\n", "user_tag")
    output_text.see("end")

#ูุฐุง ูุงุทููููู ุงูุนูุฑ ููุณ ููุฑุช ุงูู ููู ุจุณ ุงูู ููุตูุฑ ูู ูููุณุชุฎุฏู
def print_saqr_output(text,not_r=0):
    if not_r == 1:
        output_text.tag_configure("program_tag", justify='left', foreground='#B2B2B2')
        output_text.insert("end", f"{text}\n", "program_tag")
        output_text.see("end")
    elif not_r == 2:
        say(text)
    else:
        output_text.tag_configure("program_tag", justify='left', foreground='#B2B2B2')
        output_text.insert("end", f"{text}\n", "program_tag")
        output_text.see("end")
        say(text)

# ูุฐู ุงูููุงูุงุช ุงูููุชุงุญูุฉ ุงู ูุฏู ูุด ุชุณูู ุงุฒุจุฏู ูุฐุง ูุนุฑู ูุด ุงูุช ุชุจู ูู ุตูุฑ
def process_key_words(key_words):
    if "ุดุบู" in key_words:
            search_query = key_words.replace("ุดุบู", "")
            print_saqr_output(f"ุฌุงุฑู ุงูุจุญุซ ุนู{search_query} ุนูู ุงูููุชููุจ.")
            kit.playonyt(search_query)
    elif "ุชุญุจูู" in key_words:
        print_saqr_output("ูุง")
    elif "ุงูุช ุงูุถู" in key_words:
        print_saqr_output("ูุงุญุจูุจู ูุงููุจู ุงูุชุง ูู ุชุจุบุง ุนูููู ุงุฎูุน ุงููุง ุฐุญูู ูุฐุง ูุงุนุทูู", 1)
        os.system('mpg321 bander_r.mp3')
    elif "ุนุงุฏู ุงุฌุฑุจู" in key_words or "ุนุงุฏู ุฌุฑุจู" in key_words:
        print_saqr_output("ูุง ุทุจุนุง ูููุฏ ูุจุณ .......")
    elif "ุงูุชูููุง" in key_words:
        print_saqr_output("ููุชูููุง  ๐ ๐", 1)
        os.system('mpg321 srtkaif.mp3')
    elif "ูู ูู ุงูุงูุถู" in key_words and len(key_words) < 18:
        print_saqr_output("ููุณู ูุจุนุฏ ุฐุงูู ุฃูุณุชุงุฐุฉ ุนุจูุฑ ู ุฃูุฌุงุฏ")
    elif "ููุงุฐุง ุชู ุงุถุงูู ูู ูุงุฌูู ุฑุณูููู" in key_words:
        video_path = "sys.mp4"  # ุงุถู ูุณุงุฑ ุงูููุฏูู ููุง
        print_saqr_output("ุณูุงุณุฉ ุงูููุงู ุจูู ููุณูู ููุงุท")
        try:
            subprocess.Popen(["open", video_path])  # ูุชุญ ุงูููุฏูู ุจุงุณุชุฎุฏุงู ุงูุชุทุจูู ุงููุดุบู ุงูุงูุชุฑุงุถู
        except FileNotFoundError:
            print_saqr_output("ูู ูุชู ุงูุนุซูุฑ ุนูู ูุดุบู ููุฏูู ููุงุณุจ.")
    elif "ูู ุงูุช" in key_words:
        print_saqr_output("ุงูุง ุจุฑูุงูุฌ ุชู ุชุทููุฑู ูู ูุจู ูููุฏ ุงูุญูุจุงูู ูุชู ุฑุจุทู ูุน ูููุจูุฏูุง ููุน ูุญุฑู ุงูุจุญุซ ูููู")

        elif "ุดูู ูู" in key_words:



            search_query = key_words.replace("ุดูู ูู", "")
            print_saqr_output(f"ุฌุงุฑู ุงูุจุญุซ ุนู{search_query} ุนูู ุงู ุงู ุฏู ุจู.")

            translator = Translator(from_lang="ar", to_lang="en")
            translation = translator.translate(search_query)
            print_saqr_output(translation)

            url = "https://online-movie-database.p.rapidapi.com/auto-complete"

            querystring = {"q": translation}

            api_key = {
                "X-RapidAPI-Key": "20cddadde1msh9f461035256fe15p16e203jsn78eb1dac15bf",
                "X-RapidAPI-Host": "online-movie-database.p.rapidapi.com"
            }

            response = requests.get(url, headers=api_key, params=querystring)
            data=response.json()
            print(response.json())
            rank=data["d"][0]["rank"]
            s=data["d"][0]["s"]
            y=data["d"][0]["y"]
            print_saqr_output(f"ุชุฑุชูุจ ุงูููู ูู {rank}")
            print_saqr_output(f"ุงุจุทุงู ุงูููู ูู {s}",1)
            print_saqr_output(f"ุณูุฉ ุชุตููุน ุงูููู ูู {y}")
    elif "ุงุจุญุซ" in key_words:
        person_query = key_words.replace("ุงุจุญุซ", "")

        def search_google(query, api_key, cx):
            base_url = "https://www.googleapis.com/customsearch/v1"
            params = {
                "key": api_key,
                "cx": cx,
                "q": query
            }

    elif "ุงุจุญุซ" in key_words:
        person_query = key_words.replace("ุงุจุญุซ", "")

        def search_google(query, api_key, cx):
            base_url = "https://www.googleapis.com/customsearch/v1"
            params = {
                "key": api_key,
                "cx": cx,
                "q": query
            }

            try:
                response = requests.get(base_url, params=params)
                data = response.json()
                return data
            except requests.RequestException as e:
                print("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุงุชุตุงู ุจูุญุฑู ุงูุจุญุซ.")
                print(e)
                return None

        api_key = "AIzaSyBRPEUwx5q0dgHdIqjp60HOSZwaE3sr8zQ"
        cx = "a542a07dfc65a476b"

        query = person_query
        search_result = search_google(query, api_key, cx)

        if search_result:
            items = search_result.get("items", [])
            for i, item in enumerate(items, start=1):
                title = item.get("title", "ุนููุงู ุบูุฑ ูุชููุฑ")
                link = item.get("link", "ุฑุงุจุท ุบูุฑ ูุชููุฑ")
                snippet = item.get("snippet", "ูุนูููุงุช ุบูุฑ ูุชููุฑุฉ")
                print_saqr_output(f"ูุชูุฌุฉ {i}:",1)
                print_saqr_output(f"ุงูุนููุงู: {title}",1)
                print_saqr_output(f"ุงูุฑุงุจุท: {link}",1)
                print_saqr_output(f"ููุชุทู: {snippet}",1)
                if i == 1:
                    print_saqr_output(f"{title}", 2)
                    print_saqr_output(f"{snippet}", 2)
                print_saqr_output("--------------------------")

        else:
            print_saqr_output(f" ูู ูุชู ุงูุนุซูุฑ ุนูู ูุชุงุฆุฌ {person_query}.")

    elif "ูู ูู" in key_words:
        person_query = key_words.replace("ูู ูู", "")
        wiki_wiki = wikipediaapi.Wikipedia(
            language='ar', extract_format=wikipediaapi.ExtractFormat.HTML, user_agent="MyApp/1.0"
        )
        page = wiki_wiki.page(person_query)
        if page.exists():
            summary = BeautifulSoup(page.summary[:200], "html.parser").text
            print_saqr_output(f"{person_query} ูู: {summary}")
        else:
            print_saqr_output(f" ูุงุชูุฌุฏ ูุนูููุงุช {person_query}.")
    else:
        print_saqr_output("ุงุทูุจ ุบูุฑ ูุนุฑู")
        pass

#ูุฐุง ุนุดุงู ูุนุฑู ุงูุช ุชุจู ุตูุฑ ููุง ุชุจู ุงูุณุงู ูููููู ุงูุฒุญ ูุฐุง ุจุณ ูุชุงูุฏ ุงูู ููุช ุตูุฑ ูู ุงูุจุฏุงูุฉ
def lisn_for_key_wordss():
    recognizer = sr.Recognizer()
    wake_word_detected = False

    while True:
        with sr.Microphone() as source:
            print("ูู ุดูุฆุง...")
            recognizer.adjust_for_ambient_noise(source, duration=1)
            audio = recognizer.listen(source)

            print("ุฌุงุฑู ุงูุชุนุฑู ุนูู ุงูุตูุช...")
            key_words = recognizer.recognize_google(audio, language="ar")
            print_user_input(key_words)

            if "ุตูุฑ" in key_words and len(key_words) < 9:
                wake_word_detected = True
                print_saqr_output("ุงููุง ุจู!")
            else:
                if wake_word_detected or "ุตูุฑ" in key_words:
                    index = key_words.index("ุตูุฑ")
                    key_words = key_words[index:]
                    if "ุตูุฑ" in key_words and "ุต" == key_words[0]:
                        replace_saqr = key_words.replace("ุตูุฑ", "", 1)
                        process_key_words(replace_saqr)
                    else:
                        print_saqr_output("ูุฌุจ ููู ุตูุฑ ูุจู ุงุนุทุงุก ุงู ุงูุงูุฑ",1)
                else:
                    print_saqr_output("ูุฌุจ ููู ุตูุฑ ูุจู ุงุนุทุงุก ุงู ุงูุงูุฑ",1)


def start_listening():
    lisn_for_key_wordss_thread = threading.Thread(target=lisn_for_key_wordss)
    lisn_for_key_wordss_thread.daemon = True
    lisn_for_key_wordss_thread.start()


# ูุฐุง ุญู  Tkinter
root = tk.Tk()
root.title("ุตูุฑ Project")
root.geometry("800x600")

# ูุฐุง ูุญุท ูู emoji ุชุญุช
emoji_label = tk.Label(root, text="ุฌุงุฑู ุงูุชุญููู ..... (ููุจุฏุก ูู ุตูุฑ)", font=("Arial", 30))
emoji_label.pack(side="bottom", pady=20)

#ูุฐุง ูุฑูุช ููู ุนุดุงู ุจุณ ูุชุบูุฑ ุงูุงูููุฌู ูู ุงูุญุงูุชูู
def lisn_for_key_wordss():
    recognizer = sr.Recognizer()
    wake_word_detected = False

    while True:
        with sr.Microphone() as source:
            print("ูู ุดูุฆุง...")
            recognizer.adjust_for_ambient_noise(source, duration=1)
            audio = recognizer.listen(source)

        try:
            print("ุฌุงุฑู ุงูุชุนุฑู ุนูู ุงูุตูุช...")
            emoji_label.config(text="โณ")  # ุนุฑุถ ุงูุฅูููุฌู ููุชุนุฑู ุนูู ุงูุตูุช
            key_words = recognizer.recognize_google(audio, language="ar")
            if "ุตูุฑ" in key_words:
                index = key_words.index("ุตูุฑ")
                key_words = key_words[index:]
                print_user_input(key_words)

            if "ุตูุฑ" in key_words and len(key_words) < 9:
                wake_word_detected = True
                print_saqr_output("ุงููุง ุจู!")
            else:
                if wake_word_detected or "ุตูุฑ" in key_words:
                    if "ุตูุฑ" in key_words and "ุต" == key_words[0]:
                        replace_saqr = key_words.replace("ุตูุฑ", "", 1)
                        process_key_words(replace_saqr)
                    else:
                        print_saqr_output("ูุฌุจ ููู ุตูุฑ ูุจู ุงุนุทุงุก ุงู ุงูุงูุฑ",1)
                else:
                    print_saqr_output("ูุฌุจ ููู ุตูุฑ ูุจู ุงุนุทุงุก ุงู ุงูุงูุฑ",1)
                    pass

        except sr.UnknownValueError:
            pass
        except sr.RequestError as e:
            pass
        finally:
            emoji_label.config(text="๐")


# ูุฐุง ูุนุฑุถ ููุงูู ุจููู ูุจูู ุตูููุฑโค๏ธ
output_text = tk.Text(root, font=("Arial", 30), wrap="word")
output_text.pack(fill="both", expand=True)

# ูุฐุง ุจุณ ูุจุฏุง ุนุดุงู ูุชุณูุน ุชุฑู ุงูุฏุฑ ุงุฎูู ููู ุชุณุฌูู ูุงุณูุน ูุด ุชููููู ูุง ุงูุชุจู ูู ูุฐู ุงูุชูููุงุช ูุซู ุงูููุณุง ู ูุณุช ูููู
start_listening()

# ูุฐุง ุนุดุงู ูุจุฏุง ุงูุจุฑูุงูุฌ ูุนุดุงู ุจุนุฏ ูุชุญุฏุซ ูู ุดูู
root.mainloop()


#ูุจุณ ูุงููู ุงูุจุฑูุงูุฌ ุญุทูุช ูู ุญููู ูุงู ุชุนุจุช ูุนุฏุช ุนููู ุณุงุนุฉ ููุต ุ ูุดูู ุนุดุงู ุงูุชุทููุฑุงุช

#ุงุชููู ุงุนุฌุจูู ุชููููู ููุจุฑูุงูุฌ ูุงูู ูุงูุนุฌุจู ุจุงููู ุตูุฑ ููู ุงุฌูุฏู

#ูุงูู ูุดูู ุงูู ุงุณูุก ุจุฑูุงูุฌ ุงุณุชูุงุน ุญุงุจ ุงูููู ุญุชู ุงูุง ูุดูู
